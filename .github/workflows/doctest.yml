# name: Doctest
#
# on:
#   push:
#     branches: [main]
#   pull_request:
#     branches: [main]
#
# jobs:
#   build:
#     name: GHC ${{ matrix.ghc-version }} on ${{ matrix.os }}
#     runs-on: ${{ matrix.os }}
#     strategy:
#       fail-fast: false
#       matrix:
#         os: [ubuntu-latest]
#         ghc-version: ['9.8']
#
#     steps:
#       - uses: actions/checkout@v4
#
#       - name: Set up GHC ${{ matrix.ghc-version }}
#         uses: haskell-actions/setup@v2
#         id: setup
#         with:
#           ghc-version: ${{ matrix.ghc-version }}
#           # Defaults, added for clarity:
#           cabal-version: 'latest'
#           cabal-update: true
#
#       - name: Configure the build
#         run: |
#           cabal configure --enable-tests --enable-benchmarks --disable-documentation
#           cabal build all --dry-run
#         # The last step generates dist-newstyle/cache/plan.json for the cache key.
#
#       - name: Restore cached dependencies
#         uses: actions/cache/restore@v4
#         id: cache
#         env:
#           key: ${{ runner.os }}-ghc-${{ steps.setup.outputs.ghc-version }}-cabal-${{ steps.setup.outputs.cabal-version }}
#         with:
#           path: ${{ steps.setup.outputs.cabal-store }}
#           key: ${{ env.key }}-plan-${{ hashFiles('**/plan.json') }}
#           restore-keys: ${{ env.key }}-
#
#       - name: Install dependencies
#         # If we had an exact cache hit, the dependencies will be up to date.
#         if: steps.cache.outputs.cache-hit != 'true'
#         run: cabal build all --only-dependencies
#
#       # Cache dependencies already here, so that we do not have to rebuild them should the subsequent steps fail.
#       - name: Save cached dependencies
#         uses: actions/cache/save@v4
#         # If we had an exact cache hit, trying to save the cache would error because of key clash.
#         if: steps.cache.outputs.cache-hit != 'true'
#         with:
#           path: ${{ steps.setup.outputs.cabal-store }}
#           key: ${{ steps.cache.outputs.cache-primary-key }}
#
#       - name: Build
#         run: cabal build all
#
#       - name: Run tests
#         run: cabal test all
#
#       - name: Run Doctest
#         # Note - Tests from Examples for functions that return randomized results are expected to fail
#         run: cabal install doctest --overwrite-policy=always && cabal build && cabal repl --build-depends=QuickCheck --build-depends=template-haskell --with-ghc=doctest
